El parser construye la lista de comandos partiendo de la lista de tokens

Ejecuta 5 validaciones sintacticas.
-Que el primer token no sea una pipe
-Localiza si existen token tipo T_ERROR, como "&&" tokens, que la minishell no debe gestionar.
-Que no haya errores tipo "| |" pipe->espacio->pipe
-Valida que lo que venga antes y despues de | sea v√°lido.
-Que el ultimo token no sea una pipe.

Crea y reserva memoria para un nuevo comando:

typedef struct s_cmd
{
	char			**av;
	char			*path;
	int				ac;
	int				len;
	t_redir			*redirs;
	char			**cmd_env;
	struct s_cmd	*next;
}	t_cmd;

Toda la asignacion se lleva a cabo en run_parse.
Crea a la lista de comandos para ese nuevo input.
Fija el primero en el actual, y el ultimo en EOF.
Cada comando lo procesa process_token:

que distingue en palabra/comando, redireccion o pipe

